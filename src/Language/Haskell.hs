{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeSynonymInstances #-}
module Language.Haskell
where

import Language.APIDef.APIDef
import Language.APIDef.Utils
import Text.PrettyPrint
import Language.APIDef.PrettyPrint

-- Currently data generated by this module is totaly different from Haskell data type.

instance Pretty DDecl where
  pretty (DData doc (MkDData name term tyds)) = pretty name $$ (nest 4 (vcat $ map pretty tyds))
  pretty (DRecord doc name con fs) = pretty name $$ (nest 4 (vcat $ map pretty fs))
  pretty _ = empty

instance Pretty DTerm where
  pretty _ = text "not yet"

instance Pretty DTypeDecl where
  pretty (MkDTy n doc typ) = pretty n $$ (nest 4 $ colon <+> pretty typ)

instance Pretty DField where
  pretty (MkDField doc n typ) = pretty n <+> colon <+> pretty typ

instance Pretty TypeName where
  pretty (Prim c) = text $ show c
  pretty (DT tm) = pretty tm
  pretty (DD dd) = pretty dd
  pretty None = empty
  
instance Pretty a => Pretty ([a]) where
  pretty ls = vcat $ map pretty ls

instance (Pretty a, Pretty b) => Pretty (a, b) where
  pretty (a, b) = text "(" <+> pretty a <+> text "," <+> pretty b <+> text ")"
